1. ini config parser
   import ConfigParser
    
   cf = ConfigParser.ConfigParser()
   cf.read('file.ini')
   cf.sections()
   cf.options('section_name')
   cf.items('section_item')
   re = cf.get('section','option')
   re2 = cf.getint('section','option')

   #write to the config file
   cf.set('section','option','new_value') 
   cf.write(open('file.ini','w'))

2. push a commit to github
   git commit -m 'commit msg' (do add/rm first if have file/dir changed)
   git push git@github.com:szho42/pythonlearning.git

3. RE(Regularexpression)
   basic elements: .^$*+?{[]\|()
  
   [abc] -> [a-c]
   [a-z] 
   [^5] -> reverse
   [\[] [\\] -> escape '\'
   \d -> [0-9]
   \D -> [^0-9]
   \s -> [\t\n\r\f\v] -> special character
   \S -> [^\t\n\r\f\v] -> non-special character
   \w -> [a-zA-Z0-9] -> characters and number
   \W -> [^a-zA-Z0-9] -> non characters or numbers

   . -> all characters besides newline
   
   #repeat in re
   * -> repeat 0 or n times
       ca*t -> ct, cat, caat,caaat...
   + -> repeat > 0 times
       ca+t -> cat, caat...
   ? -> 1 or 0 times
       ca?t -> only ct & cat
   {m,n} -> repeat (m,n) times
       a/[1,3]b -> a/b, a//b, a///b
       {0,} -> *
       {1,} -> +
       {0,1} -> ?
   
   # re in python:
   import re
   p = re.compile('ab*')
   
   # raw in python -> escape speical characters
   r"ab"
   r"\n" -> matching \n
   
   # compile flags
   I / IGNORECASE -> sPAM, sPam, Spam
   L / LOCALE     -> localization 
   M / MULTILINE  
   S / DOTALL     -> use . to match all the character includes \n
   X / VERBOSE    -> 	charref = re.compile(r"""
		     	&[[]]     # Start of a numeric entity reference
			(
			[0-9]+[^0-9]      # Decimal form
			| 0[0-7]+[^0-7]   # Octal form
			| x[0-9a-fA-F]+[^0-9a-fA-F] # Hexadecimal form
			)
			""", re.VERBOSE)
 			
   # more basic symbols
   | -> or -> Ship|Shop
   ^ -> mark the start of a line -> re.search('^From', 'From ...') 
   $ -> mark the end of a line -> re.search('}$','{statements}')
   \A -> only match start of a string
   \Z -> only matching end of a string
   \b -> zero-width assertions -> re.search(r'\bclass\b', 'a class is..')
   \B -> zero-width assertions -> re.search(r'\Bclass\B', 'subclass is') 
   
   # group in re
   ()
   (ab)* -> ab, abab, ababab,...
   (a(b))c -> abc, ab, b -> group 0, group 1, group 2
   # non-naming group
   re.match("(?:[abc])+", "abc")
       -> groups() -> () -> null
  
   # naming group 
   (?<name>[a+])   
   eg. 	InternalDate = re.compile(r‘INTERNALDATE "‘
	r‘(?P<day>[ 123][0-9])-(?P<mon>[A-Z][a-z][a-z])-‘
	r‘(?P<year>[0-9][0-9][0-9][0-9])‘
	r‘ (?P<hour>[0-9][0-9]):(?P<min>[0-9][0-9]):(?P<sec>[0-9][0-9])‘
	r‘ (?P<zonen>[-+])(?P<zoneh>[0-9][0-9])(?P<zonem>[0-9][0-9])‘
	r‘"‘) 
   
   (?=...)
   (?=!...)
   .*[.](?!bat$).*$ -> matching excluding .bat files
   .*[.](?!bat$|exe$).*$ -> matching exclding .bat or .exe files
   
   split(string)
	p = re.compile(r‘\W+‘)
	p2 = re.compile(r‘(\W+)‘)
	p.split(‘This... is a test.‘)
	[‘This‘, ‘is‘, ‘a‘, ‘test‘, ‘‘]
	p2.split(‘This... is a test.‘)
	[‘This‘, ‘... ‘, ‘is‘, ‘ ‘, ‘a‘, ‘ ‘, ‘test‘, ‘.‘, ‘‘] 

   sub(replacement, string[,count=0])
   	p = re.compile( ‘(blue|white|red)‘)
	p.sub( ‘colour‘, ‘blue socks and red shoes‘)
	‘colour socks and colour shoes‘
	p.sub( ‘colour‘, ‘blue socks and red shoes‘, count=1)
	‘colour socks and red shoes‘ 

   subn() -> return the new string and the number of replacement operations

4. python new keywords
   apply()
       apply(function, parameters)
   lambda
      lambda i: i*10, [1,2,3] => [10,20,30]
   __name => private variable

   __getitem__(self,key):
   __setitem__(self,key,value): 
       
5. import vs. __import__
       import os
       __import__("os")
   import py_compile
   py_compile.compile("e:""User""py""hello.py")
   import compileall
   comileall.compile_dir("e:""Users""py")

6. xrange() vs. range()
   range() -> list
   xrange() -> iterator(xrange type)

7. .join()
   ",".join("a","b","c") -> a,b,c
   "|".join("efg") -> e|f|g

8. 0<i<10 vs. i>0 and i<10
   |-> better performance

9. workspace -> local repository -> remote repository
         commit/checkout               push/fetch    
			pull/rebase


